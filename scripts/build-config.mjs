/**
 * @fileoverview Script to build configs for `eslint-markdown`.
 * Usage: `node path/to/build-config.mjs`
 */

// --------------------------------------------------------------------------------
// Import
// --------------------------------------------------------------------------------

import { writeFileSync } from 'node:fs';
import markdown from 'eslint-plugin-mark';
import prettier from 'prettier'; // eslint-disable-line import/no-extraneous-dependencies -- Required

// --------------------------------------------------------------------------------
// Helper
// --------------------------------------------------------------------------------

/** @param {string} configName @param {Record<string, string>} rules */
async function generateCode(configName, rules) {
  const url = new URL(
    `../packages/eslint-plugin-mark/src/configs/${configName}.js`,
    import.meta.url,
  );
  const prettierConfig = await prettier.resolveConfig(url);
  const code = `
/**
 * @fileoverview \`${configName}\` configuration.
 * WARNING: This file is autogenerated using the \`scripts/build-config.mjs\`
 */

// --------------------------------------------------------------------------------
// Import
// --------------------------------------------------------------------------------

import base from './base.js';

// --------------------------------------------------------------------------------
// Typedef
// --------------------------------------------------------------------------------

/**
 * @import { Linter } from "eslint";
 */

// --------------------------------------------------------------------------------
// Export
// --------------------------------------------------------------------------------

/** @type {Linter.Config} */
export default {
  ...base,
  name: 'mark/${configName}',
  rules: ${JSON.stringify(rules)},
};
`.trimStart();

  writeFileSync(
    url,
    await prettier.format(code, { filepath: url.pathname, ...prettierConfig }),
  );
}

// --------------------------------------------------------------------------------
// Script
// --------------------------------------------------------------------------------

const allRules = {};
const recommendedRules = {};
const stylisticRules = {};

for (const [ruleName, rule] of Object.entries(markdown.rules)) {
  allRules[`mark/${ruleName}`] = 'error';

  if (rule.meta.docs.recommended === true) {
    recommendedRules[`mark/${ruleName}`] = 'error';
  }

  if (rule.meta.docs.stylistic === true) {
    stylisticRules[`mark/${ruleName}`] = 'error';
  }
}

generateCode('all', allRules);
generateCode('recommended', recommendedRules);
generateCode('stylistic', stylisticRules);
